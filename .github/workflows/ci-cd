name: ci-cd

on:
  push:
    branches: [qa, staging, master, feature/*]

env:
  language: "javascript"
  app-name: "angular-template-web-ui"
  ARTIFACTORY_READER_API_KEY: ${{ secrets.ARTIFACTORY_READER_API_KEY }}
  ARTIFACTORY_READER_USER: ${{ secrets.ARTIFACTORY_READER_USER }}
  aws-region: "us-east-1"
  build-folder: "dist/bbog-dig-angular-template-web-ui"
  bucket: "lifecycle-frontend-web-ui"
  distribution: "E4QFXQ2K97T4S"
  cache-path: node_modules

jobs:
  install-dev-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: Restore or save cache for dev Dependencies
        uses: actions/cache@v3
        env:
          cache-name: npm-node-modules-dev
        with:
          path: node_modules
          key: npm-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}-dev
      - name: Install Dependencies
        run: |
          chmod +x ci-cd/install-dependencies.sh
          sh ci-cd/install-dependencies.sh

  install-prod-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: Restore or save cache for prod Dependencies
        uses: actions/cache@v3
        env:
          cache-name: npm-node-modules-prod
        with:
          path: node_modules
          key: npm-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}-prod
      - run: ls
      - name: Install Dependencies
        run: |
          if [ -d "node_modules" ]; then
            echo 'Dependencies already exists!'
          else
            sh ci-cd/install-dependencies-prod.sh
          fi

  build:
    runs-on: ubuntu-latest
    needs: ['install-dev-dependencies','install-prod-dependencies']
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: Restore or save cache for dev Dependencies
        uses: actions/cache@v3
        env:
          cache-name: npm-node-modules-dev
        with:
          path: node_modules
          key: npm-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}-dev
      - name: Create build
        run: |
          CURRENT_BRANCH=$(echo ${GITHUB_REF#refs/heads/})
          echo $CURRENT_BRANCH
          if [ "$CURRENT_BRANCH" == "master" ]
          then
              npm run build:prod
          fi
          if [ "$CURRENT_BRANCH" == "staging" ]
          then
              npm run build:st
          fi
          if [ "$CURRENT_BRANCH" == "qa" ]
          then
              npm run build:qa
          fi
          if [ "$CURRENT_BRANCH" != "master" ] && [ "$CURRENT_BRANCH" != "staging" ] && [ "$CURRENT_BRANCH" != "qa" ]
          then
            npm run build
          fi
      - name: Persist Data
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: ${{ env.build-folder }}

  test:
    runs-on: ubuntu-latest
    needs: install-dev-dependencies
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: Restore or save cache for dev Dependencies
        uses: actions/cache@v3
        env:
          cache-name: npm-node-modules-dev
        with:
          path: node_modules
          key: npm-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}-dev
      - name: Running Linter
        run: npm run lint
      - name: Running Test
        run: |
          npm run test && npm run coverage && ls && cat coverage/lcov.info
      - name: Persist Data
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage

  sonar:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - uses: actions/checkout@v3
      - name: Restore Data
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: coverage
      - name: list coverage
        run:  ls coverage && cat coverage/lcov.info
      - name: Checkout bancodebogota/bbog-dig-sonarcloud-pipeline
        uses: actions/checkout@v3
        with:
          repository: bancodebogota/bbog-dig-sonarcloud-pipeline
          ref: 0.1.0
          token: ${{secrets.DIG_READER_GITHUB_ACCESS_TOKEN}}
          persist-credentials: false
          path: ./.github/actions/bbog-dig-sonarcloud-pipeline
      - name: Current Branch
        shell: bash
        run: echo "Example reporting to Sonar"

  qa-scanner-front:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - uses: actions/checkout@v3
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ${{ env.cache-path }}
          key: npm-${{ env.project_name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: npm-${{ env.project_name }}
      - name: Checkout Scann front
        uses: actions/checkout@v3
        with:
          repository: bancodebogota/bbog-dig-do-front-scanner
          ref: ''
          token: ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/bbog-dig-do-front-scanner
      - name: Front Scanner
        uses: ./.github/actions/bbog-dig-do-front-scanner
        with:
          current-branch: QA
          config-file: "./sherpa-scanner.config.js"


  qa-deploy-virginia:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/qa'
    environment: qa
    needs: [install-prod-dependencies, sonar]
    steps:
      - uses: actions/checkout@v3
      - name: Checking LabActions
        uses: actions/checkout@v3
        with:
          repository: bancodebogota/bdb-dig-do-pipelines-action-s3
          ref: ''
          token: ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/bdb-dig-do-pipelines-action-s3
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ${{ env.cache-path }}
          key: npm-${{ env.project_name }}-${{ hashFiles('**/package.json') }}
          restore-keys: npm-${{ env.project_name }}
      - name: Restore Data
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ${{ env.build-folder }}
      - name: Deploy
        uses: ./.github/actions/bdb-dig-do-pipelines-action-s3/S3
        with:
          aws-account-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.aws-region }}
          app-name: ${{ env.app-name }}
          enable-custom-app-name: false
          version: $GITHUB_SHA
          build-folder: ${{ env.build-folder }}
          bucket: qa-${{ env.bucket }}
          distribution-id: ${{ env.distribution }}

  staging-deploy-virginia:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment: st
    needs: [install-prod-dependencies, sonar]
    steps:
      - uses: actions/checkout@v3
      - name: Checking LabActions
        uses: actions/checkout@v3
        with:
          repository: bancodebogota/bdb-dig-do-pipelines-action-s3
          ref: ''
          token: ${{ secrets.DIG_READER_GITHUB_ACCESS_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/bdb-dig-do-pipelines-action-s3
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ${{ env.cache-path }}
          key: npm-${{ env.project_name }}-${{ hashFiles('**/package.json') }}
          restore-keys: npm-${{ env.project_name }}
      - name: Restore Data
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ${{ env.build-folder }}
      - name: Deploy
        uses: ./.github/actions/bdb-dig-do-pipelines-action-s3/S3
        with:
          aws-account-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.aws-region }}
          app-name: ${{ env.app-name }}
          enable-custom-app-name: false
          version: $GITHUB_SHA
          build-folder: ${{ env.build-folder }}
          bucket: staging-${{ env.bucket }}
          distribution-id: ${{ env.distribution }}

  prod-deploy-virginia:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    environment: pr
    needs: [install-prod-dependencies, sonar]
    steps:
      - name: Running Linter
        run: echo "Example prod-deploy-virginia"

